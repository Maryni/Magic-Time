              
                // Get all version that have the same Major/Minor
                var versions = Versions.Where(package => package.Version.Major == Current.Version.Major && package.Version.Minor == Current.Version.Minor);

                return versions.LastOrDefault();
            }
        }

        // This is the very latest version, including pre-releases (eg: 1.4.0-beta).
        internal PackageInfo Latest { get { return Versions.FirstOrDefault(package => package.IsLatest) ?? Versions.LastOrDefault(); } }

        // Returns the current version if it exist, otherwise returns the latest user visible version.
        internal PackageInfo VersionToDisplay { get { return Current ?? LatestUpdate; } }

        // Every version available for this package
        internal IEnumerable<PackageInfo> Versions { get { return source.OrderBy(package => package.Version); } }

        // Every version that's not a pre-release (eg: not beta/alpha/preview).
        internal IEnumerable<PackageInfo> ReleaseVersions
        {
            get { return Versions.Where(package => !package.IsPreRelease); }
        }
        
        internal PackageInfo LatestRelease { get {return ReleaseVersions.LastOrDefault();}}
        internal PackageInfo Verified { get {return Versions.FirstOrDefault(package => package.IsVerified);}}

        internal bool IsAfterCurrentVersion(PackageInfo packageInfo) { return Current == null || (packageInfo != null  && packageInfo.Version > Current.Version); }

        internal bool IsBuiltIn {get { return Versions.Any() && Versions.First().IsBuiltIn; }}

        public string Name { get { return packageName; } }

        public bool IsPackageManagerUI
        {
            get { return Name == packageManagerUIName; }
        }
        
        public bool Equals(Package other)
        {
            if (other == null) 
                return false;
            
            return packageName == other.packageName;
        }

        public override int GetHashCode()
        {
            return packageName.GetHashCode();
        }
        
        [SerializeField]
        internal readonly OperationSignal<IAddOperation> AddSignal = new OperationSignal<IAddOperation>();

        private Action OnAddOperationFinalizedEvent;
        
        internal void Add(PackageInfo packageInfo)
        {
            if (packageInfo == Current || AddRemoveOperationInProgress)
                return;

            var operation = OperationFactory.Instance.CreateAddOperation();
            addRemoveOperationInstance = operation;
            OnAddOperationFinalizedEvent = () =>
            {
                AddSignal.Operation = null;
                operation.OnOperationFinalized -= OnAddOperationFinalizedEvent;
                PackageCollection.Instance.FetchListOfflineCache(true);
            };

            operation.OnOperationFinalized += OnAddOperationFinalizedEvent;

            AddSignal.SetOperation(operation);
            operation.AddPackageAsync(packageInfo);
        }

        internal void Update()
        {
            Add(Latest);
        }

        internal static void AddFromLocalDisk(string path)
        {
            if (AddRemoveOperationInProgress)
                return;

            var packageJson = PackageJsonHelper.Load(path);
            if (null == packageJson)
            {
                Debug.LogError(string.Format("Invalid pack