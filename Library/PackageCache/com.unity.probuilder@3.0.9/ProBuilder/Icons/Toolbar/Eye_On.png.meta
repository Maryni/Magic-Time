var test = require('tap').test
var url = require('url')

// var server = require('./lib/server.js')
var Client = require('../')

test('defaulted initialization', function (t) {
  var client = new Client()
  var options = client.initialize(
    'http://localhost:1337/',
    'GET',
    'application/json',
    {}
  )

  t.equal(options.url, 'http://localhost:1337/', 'URLs match')
  t.equal(options.method, 'GET', 'methods match')
  t.equal(options.proxy, undefined, "proxy won't overwrite environment")
  t.equal(options.localAddress, undefined, 'localAddress has no default value')
  t.equal(options.strictSSL, true, 'SSL is strict by default')

  t.equal(options.headers.accept, 'application/json', 'accept header set')
  t.equal(
    options.headers.version,
    require('../package.json').version,
    'npm-registry-client version is present in headers'
  )
  t.ok(options.headers['npm-session'], 'request ID generated')
  t.ok(options.headers['user-agent'], 'user-agent preset')

  var HttpAgent = require('http').Agent
  t.ok(options.agent instanceof HttpAgent, 'got an HTTP agent for an HTTP URL')
  t.equal(options.agent.maxSockets, 50, 'maxSockets set to a reasonable default')

  t.end()
})

test('intializing with maxSockets set works for http', function (t) {
  var client = new Client({ maxSockets: Infinity })
  var options = client.initialize(
    url.parse('http://localhost:1337/'),
    'GET',
    'application/json',
    {}
  )

  var HttpAgent = require('http').Agent
  t.ok(options.agent instanceof HttpAgent, 'got an HTTP agent for an HTTP URL')
  t.equal(options.agent.maxSockets, Infinity, 'request uses configured value for maxSockets')

  t.end()
})

test('intializing with maxSockets set works for https', function (t) {
  var client = new Client({ maxSockets: Infinity })
  var options = client.initialize(
    url.parse('https://localhost:1337/'),