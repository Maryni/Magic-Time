have a release or timeout or otherwise fail.
                uint32_t remainingWaitTime = timeoutMS;
                WaitStatus waitStatus = kWaitStatusSuccess;
                while (m_Count == 0)
                {
                    if (timeoutMS == posix::kNoTimeout)
                    {
                        // Infinite wait. Can only be interrupted by APC.
                        ++m_WaitingThreadCount; // No synchronization necessary; we hold the mutex.
                        int status = pthread_cond_wait(&m_Condition, &m_Mutex);
                        --m_WaitingThreadCount;

                        if (status != 0)
                        {
                            waitStatus = kWaitStatusFailure;
                            break;
                        }
                    }
                    else
                    {
                        // Timed wait. Can be interrupted by APC or timeout.
                        const int64_t waitStartTime = Time::GetTicks100NanosecondsMonotonic();
                        timespec timeout = posix::MillisecondsToTimespec(remainingWaitTime);

#if !IL2CPP_USE_POSIX_COND_TIMEDWAIT_REL
                        timespec waitStartTimeSpec = posix::Ticks100NanosecondsToTimespec(waitStartTime);
                        timeout.tv_sec += waitStartTimeSpec.tv_sec;
                        timeout.tv_nsec += waitStartTimeSpec.tv_nsec;
                        if (timeout.tv_nsec >= 1000000000)
                        {
                            timeout.tv_nsec -= 1000000000;
                            ++timeout.tv_sec;
                        }
#endif

                        ++m_WaitingThreadCount;
#if !IL2CPP_USE_POSIX_COND_TIMEDWAIT_REL
                        // For plain POSIX, do an absolute timed wait.
                        int status = pthread_cond_timedwait(&m_Condition, &m_Mutex, &timeout);
#else
                        // For OSX and iOS, do a relative timed wait.
                        int status = pthread_cond_timedwait_relative_np(&m_Condition, &m_Mutex, &timeout);
#endif
                        --m_WaitingThreadCount; ////TODO: make this atomic for when we fail to reacquire the mutex

                        if (status == ETIMEDOUT)
                        {
                            waitStatus = kWaitStatusTimeout;
                            break;
                        }
                        else if (status != 0)
                        {
                            waitStatus = kWaitStatusFailure;
                            break;
                        }

                        // Update time we have have left to wait.
                        const uint32_t waitTimeThisRound = (Time::GetTicks100NanosecondsMonotonic() - waitStartTime) / 10000;
                        if (waitTimeThisRound > remainingWaitTime)
                            remainingWaitTime = 0;
                        else
                            remainingWaitTime -= waitTimeThisRound;
                    }

                    // We've received a signal but it may be because of an APC and not because
                    // the semaphore got signaled. If so, handle the APC and go back to waiting.
                    if (interruptible)
                        currentThread->CheckForUserAPCAndHandle();
                }

                // We're done waiting so untie us from the current thread.
                // NOTE: A thread may have grabbed us and then got paused. If we return now and then our owner
                //       tries to delete us, we would pull the rug from under the other thread. This is prevented by
                //       having a central lock on wait object deletion which any thread trying to deal with wait
                //       objects from other threads has to acquire.
                if (interruptible)
                {
                    currentThread->SetWaitObject(NULL);

                    // Avoid race condition by checking APC queue again after unsetting wait object.
                    currentThread->CheckForUserAPCAndHandle();
                }

                // If we failed, bail out now.
                if (waitStatus != kWaitStatusSuccess)
                    return waitStatus;
            }
            catch (...)
            {
                if (interruptible