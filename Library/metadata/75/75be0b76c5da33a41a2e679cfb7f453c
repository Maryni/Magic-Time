           jsvalues="href: '#' + internal_name"
                   jscontent="'#' + internal_name"></a>
              </div>
              <div jsdisplay="choices && choices.length > 0">
                <select
                  class="experiment-select"
                  jsvalues=".internal_name:internal_name;.disabled:!enabled">
                  <option jsvalues=".selected:selected"
                          jsselect="choices"
                          jscontent="description">NAME
                  </option>
                </select>
              </div>
            </div>
          </div>
          <div class="experiment-actions">
            <span>
              <a
                class="experiment-disable-link"
                jsvalues=".internal_name:internal_name"
                jsdisplay="enabled"
                href="#"
                i18n-content="disable"
                >DISABLE</a>
              <a
                class="experiment-enable-link"
                jsvalues=".internal_name:internal_name"
                jsdisplay="!enabled"
                href="#"
                i18n-content="enable"
                >ENABLE</a>
            </span>
          </div>
        </td>
        </tr>
        </table>
      </div>
    </div>

<!-- Unsupported experiments are not shown on iOS -->
<div id="container" class="vbox-container">
    <div id="top" class="wbox">
      <div class="section-header">
        <table cellpadding="0" cellspacing="0"><tr valign="center">
          <td>
            <span class="section-header-title"
                  i18n-content="flagsUnsupportedTableTitle"
              >TITLE
            </span>
          </td>
        </tr></table>
      </div>
    </div>
    </div>

    <div class="content">
      <div class="experiment"
           jsselect="unsupportedFeatures"
           jsvalues="id:internal_name">
        <table width="100%" cellpadding="2" cellspacing="0">
        <tr class="experiment-unsupported">
        <td valign="top">
          <div class="experiment-text">
            <div>
              <span class="experiment-name"
                    jscontent="name">NAME</span>
              <span jscontent="supported_platforms.join(', ')"></span>
              <div>
                <span jsvalues=".innerHTML:description"></span>
                <a class="permalink"
                   jsvalues="href: '#' + internal_name"
                   jscontent="'#' + internal_name"></a>
              </div>
            </div>
          </div>
          <div class="experiment-actions">
            <div i18n-content="flagsNotSupported"></div>
          </div>
        </td>
        </tr>
        </table>
      </div>
    </div>

    <div class="needs-restart" jsdisplay="needsRestart">
      <div i18n-content="flagsRestartNotice">NEEDS_RESTART</div>
      <button class="experiment-restart-button" type="button"
              i18n-content="flagsRestartButton">RESTART</button>
    </div>
  </div>
</div>
<script src="chrome://resources/js/i18n_template.js"></script>
<script src="chrome://resources/js/jstemplate_compiled.js"></script>
</body>
</html>
// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * This variable structure is here to document the structure that the template
 * expects to correctly populate the page.
 */

/**
 * Takes the |experimentalFeaturesData| input argument which represents data
 * about all the current feature entries and populates the html jstemplate with
 * that data. It expects an object structure like the above.
 * @param {Object} experimentalFeaturesData Information about all experiments.
 *     See returnFlagsExperiments() for the structure of this object.
 */
function renderTemplate(experimentalFeaturesData) {
  // This is the javascript code that processes the template:
  jstProcess(new JsEvalContext(experimentalFeaturesData), $('flagsTemplate'));

  // Add handlers to dynamically created HTML elements.
  var elements = document.getElementsByClassName('experiment-select');
  for (var i = 0; i < elements.length; ++i) {
    elements[i].onchange = function() {
      handleSelectExperimentalFeatureChoice(this, this.selectedIndex);
      return false;
    };
  }

  elements = document.getElementsByClassName('experiment-disable-link');
  for (var i = 0; i < elements.length; ++i) {
    elements[i].onclick = function() {
      handleEnableExperimentalFeature(this, false);
      return false;
    };
  }

  elements = document.getElementsByClassName('experiment-enable-link');
  for (var i = 0; i < elements.length; ++i) {
    elements[i].onclick = function() {
      handleEnableExperimentalFeature(this, true);
      return false;
    };
  }

  elements = document.getElementsByClassName('experiment-restart-button');
  for (var i = 0; i < elements.length; ++i) {
    elements[i].onclick = restartBrowser;
  }

  $('experiment-reset-all').onclick = resetAllFlags;

  highlightReferencedFlag();
}

/**
 * Highlight an element associated with the page's location's hash. We need to
 * fake fragment navigation with '.scrollIntoView()', since the fragment IDs
 * don't actually exist until after the template code runs; normal navigation
 * therefore doesn't work.
 */
function highlightReferencedFlag() {
  if (window.location.hash) {
    var el = document.querySelector(window.location.hash);
    if (el && !el.classList.contains('referenced')) {
      // Unhighlight whatever's highlighted.
      if (document.querySelector('.referenced'))
        document.querySelector('.referenced').classList.remove('referenced');
      // Highlight the referenced element.
      el.classList.add('referenced');
      el.scrollIntoView();
    }
  }
}

/**
 * Asks the C++ FlagsDOMHandler to get details about the available experimental
 * features and return detailed data about the configuration. The
 * FlagsDOMHandler should reply to returnFlagsExperiments() (below).
 */
function requestExperimentalFeaturesData() {
  chrome.send('requestExperimentalFeatures');
}

/**
 * Asks the C++ FlagsDOMHandler to restart the browser (restoring tabs).
 */
function restartBrowser() {
  chrome.send('restartBrowser');
}

/**
 * Reset all flags to their default values and refresh the UI.
 */
function resetAllFlags() {
  // Asks the C++ FlagsDOMHandler to reset all flags to default values.
  chrome.send('resetAllFlags');
  requestExperimentalFeaturesData();
}

/**
 * Called by the WebUI to re-populate the page with data representing the
 * current state of all experimental features.
 * @param {Object} experimentalFeaturesData Information about all experimental
 *    features in the following format:
 *   {
 *     supportedFeatures: [
 *       {
 *         internal_name: 'Feature ID string',
 *         name: 'Feature name',
 *         description: 'Description',
 *         // enabled and default are only set if the feature is single valued.
 *         // enabled is true if the feature is currently enabled.
 *         // is_default is true if the feature is in its default state.
 *         enabled: true,
 *         is_default: false,
 *         // choices is only set if the entry has multiple values.
 *         choices: [
 *           {
 *             internal_name: 'Experimental feature ID string',
 *             description: 'description',
 *             selected: true
 *           }
 *         ],
 *         supported_platforms: [
 *           'Mac',
 *           'Linux'
 *         ],
 *       }
 *     ],
 *     unsupportedFeatures: [
 *       // Mirrors the format of |supportedFeatures| above.
 *     ],
 *     needsRestart: false,
 *     showBetaChannelPromotion: false,
 *     showDevChannelPromotion: false,
 *     showOwnerWarning: false
 *   }
 */
function returnExperimentalFeatures(experimentalFeaturesData) {
  var bodyContainer = $('body-container');
  renderTemplate(experimentalFeaturesData);

  if (experimentalFeaturesData.showBetaChannelPromotion)
    $('channel-promo-beta').hidden = false;
  else if (experimentalFeaturesData.showDevChannelPromotion)
    $('channel-promo-dev').hidden = false;

  bodyContainer.style.visibility = 'visible';
  var ownerWarningDiv = $('owner-warning');
  if (ownerWarningDiv)
    ownerWarningDiv.hidden = !experimentalFeaturesData.showOwnerWarning;
}

/**
 * Handles a 'enable' or 'disable' button getting clicked.
 * @param {HTMLElement} node The node for the experiment being changed.
 * @param {boolean} enable Whether to enable or disable the experiment.
 */
function handleEnableExperimentalFeature(node, enable) {
  // Tell the C++ FlagsDOMHandler to enable/disable the experiment.
  chrome.send('enableExperimentalFeature', [String(node.internal_name),
                                            String(enable)]);
  requestExperimentalFeaturesData();
}

/**
 * Invoked when the selection of a multi-value choice is changed to the
 * specified index.
 * @param {HTMLElement} node The node for the experiment being changed.
 * @param {number} index The index of the option that was selected.
 */
function handleSelectExperimentalFeatureChoice(node, index) {
  // Tell the C++ FlagsDOMHandler to enable the selected choice.
  chrome.send('enableExperimentalFeature',
              [String(node.internal_name) + '@' + index, 'true']);
  requestExperimentalFeaturesData();
}

// Get data and have it displayed upon loading.
document.addEventListener('DOMContentLoaded', requestExperimentalFeaturesData);

// Update the highlighted flag when the hash changes.
window.addEventListener('hashchange', highlightReferencedFlag);
ï»¿<!doctype html>
<html i18n-values="dir:textdirection;lang:language">
<head>
  <meta charset="utf-8">
  <title>GCM Internals</title>
  
  <link rel="stylesheet" href="chrome://resources/css/text_defaults.css">
  <style>/* Copyright 2014 The Chromium Authors. All rights reserved.
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file. */

h1 {
  color: rgb(74, 142, 230);
  margin: 0;
  padding: 0;
}

td {
  padding: 4px;
}

tr:nth-child(odd) {
  background-color: rgb(245, 245, 200);
}

th {
  background-color: rgb(160, 160, 125);
  color: rgb(255, 255, 255);
  font-weight: bold;
}

.flexbar {
  display: flex;
  flex-direction: row;
  margin: 5px 0px;
}

.flexbar button {
  padding: 0px 4px;
}

#device-info tr :first